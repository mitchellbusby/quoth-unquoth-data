import { remove } from "lodash";
import React, { createContext, useContext, useReducer } from "react";
import { Button } from "./components/Button";

const CreateEditRoutes = () => {
  const [state, dispatch] = useContext(CreateRouteContext);
  return (
    <div>
      <div>Create and edit routes</div>
      {state ? (
        <div>
          <div>Creating route {state.routeName}</div>
          <div>Current stops:</div>
          <div>
            <ol>
              {state.stops.map((stop) => (
                <li key={stop.stopId}>
                  Stop {stop.stopId}{" "}
                  <Button
                    onClick={() => {
                      dispatch({ type: "remove-stop", stopId: stop.stopId });
                    }}
                  >
                    trash
                  </Button>
                </li>
              ))}
            </ol>
          </div>
          <div
            css={{
              display: "flex",
              gap: "4px",
            }}
          >
            <Button
              onClick={() => {
                dispatch({ type: "finish" });
              }}
            >
              Finish route
            </Button>
            <Button
              onClick={() => {
                dispatch({ type: "cancel" });
              }}
            >
              Cancel route
            </Button>
          </div>
        </div>
      ) : (
        <div>
          <Button
            onClick={() => {
              dispatch({ type: "start" });
            }}
          >
            Start route
          </Button>
        </div>
      )}
    </div>
  );
};

type CreatedRoute = {
  // todo: align with what the app has
  stops: {
    stopId: string;
  }[];
  routeName: string;
};

type CreateRouteAction =
  | {
      type: "start" | "finish" | "cancel";
    }
  | { type: "add-stop"; stop: { stopId: string } }
  | { type: "remove-stop"; stopId: string };

export function createRouteReducer(
  state: CreateRouteState,
  action: CreateRouteAction
): CreatedRoute | undefined {
  switch (action.type) {
    case "start": {
      return {
        stops: [],
        routeName: "Autogenerated route 1",
      };
    }
    case "add-stop": {
      if (!state) {
        return undefined;
      }
      const stops = [...state.stops];
      stops.push({ stopId: action.stop.stopId });
      return {
        ...state,
        stops,
      };
    }
    case "remove-stop": {
      const stops = [...state.stops];
      remove(stops, (v) => v.stopId === action.stopId);
      return { ...state, stops };
    }
    case "finish": {
      // use finished value
      return undefined;
    }
    case "cancel": {
      return undefined;
    }
  }
}

type CreateRouteState = CreatedRoute | undefined;

const CreateRouteContext =
  createContext<[CreateRouteState, React.Dispatch<CreateRouteAction>]>(
    undefined
  );

export { CreateEditRoutes, CreateRouteContext };
